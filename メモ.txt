「プログラムの実行方法」

このプログラムを実行するにはindexファイルを直接開くのではなく、サーバーを立ち上げる必要がある
以下、pythonを使ってローカルサーバーを立ち上げる手順である
pythonがインストールされているかどうかはコマンドプロンプト（ターミナル）で「python -V」と入力すると確認できる
インストールされていればpythonのバージョンが表示される

１．コマンドプロンプト（ターミナル）を起動する
２．「cd 」と入力し、コマンドプロンプト（ターミナル）に実行したいhtmlファイルが入ったフォルダをドラッグする
　　（cdの後にフォルダのパスが表示される）
　　エンターを押してそのフォルダに移動する
３．python -m http.server 8000と入力するとローカルサーバーが立ち上がる
　　（うまくいかなければ、python -m SimpleHTTPServer 8000 もしくは python3 -m http.server 8000 を試す）
４．ブラウザを開いてURLに「localhost:8000」と入力する
　　（プログラムが実行される）




「プログラムの記述方法」

フォルダ内に3Dグラフィックの頂点座標を記述したテキストファイル、ポリゴンインデックスを記述したテキストファイルを追加する。
例えば、立方体を描画する場合は、頂点座標を
[[1,1,1],[-1,1,1],[-1,-1,1],[1,-1,1],[1,1,-1],[-1,1,-1],[-1,-1,-1],[1,-1,-1]]
ポリゴンインデックスを、
[[0,1,2,3],[4,5,6,7],[0,1,5,4],[2,3,7,6],[1,2,6,5],[3,0,4,7]]
のように記述する。
この例ではポリゴンを1列に格納しているが、2次元配列に格納してもよい。


htmlファイルの<!--キャンバスを追加-->の位置に
<script>
    let 適当な変数名 = new IScene(オプション);
    適当な変数名.IaddObject(頂点リストのファイルのパス, ポリゴンインデックスリストのファイルのパス, オプション); 
</script>
と記述する。


ISceneのオプションで投影方法(projection)、背景色(background)、ライティング(light)を指定できる。

projection : 'pers' 透視投影（デフォルト）
　　　　　　　'ortho'直交投影

background : 背景色を16進数で表す
　　　　　　　（例）0xff0000 赤
　　　　　　　　　　0xdddddd グレー（デフォルト）

light : '4color'  4方向から4色の光、mathematicaの3Dグラフィック風　（デフォルト）
        'simple'　1方向から白色の光を当てる

例えば直交投影で背景色を青色にしたいときは
let scene1 = new IScene({projection:'ortho', background:0x0000ff});
と記述する。
※オプションの順番は自由
※何も設定しない場合は()の中は空白にする


IaddObjectのオプションでオブジェクトのサイズ(scale)、マテリアル・色（material）、辺を描画するか否か(wireframe)、
スライダーを使ってポリゴンを部分的に非表示にする機能をつけるか否か(range)を設定できる

scale : 数値

material : 色　16進数で指定　（0xffffffがデフォルト）
　　　　　 'normal'（面の法線方向で色が異なる、ライトの影響を受けない）

wireframe : true   辺を描画する
            false　辺を描画しない（デフォルト）

range : true   ポリゴンを非表示にするスライダーをつける
        false　ポリゴンを非表示にするスライダーをつけない（デフォルト）
※ポリゴンインデックスが1列に格納されている場合はスライダー1つ
　二次元配列に格納されている場合は二次元スライダーが追加される



オブジェクトの頂点座標のテキストファイルで、座標をパラメータ入りの数式で記述すると、スライダーでそのパラメータを変化させて
グラフィックを変形させることができる。
数式はjavascriptの文法で記述する。

数式の関数
https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Math

パラメータ入りの頂点座標を使う場合、htmlファイルの<!--座標ファイルに含まれる変数（パラメータ）を宣言-->
のところに、
var パラメータ名;
と記述する。

<!--キャンバスを追加-->の位置に
<script>
    let 適当な変数名 = new IScene(オプション);
    適当な変数名.IaddSlider('パラメータ名', パラメータスライダーのオプション);
    適当な変数名.IaddObject(頂点リストのファイルのパス, ポリゴンインデックスリストのファイルのパス, オプション); 
</script>
と記述する。

パラメータスライダーのオプション
min : スライダーの最小値　（デフォルト0）
max : スライダーの最大値　（デフォルト100）
step : スライダーのステップ量　（デフォルト1）
init ：　スライダーの初期値　（デフォルト　minとmaxの中間）



let 適当な変数名 = new IScene();
の後に
適当な変数名.IaddCuttingPlanes('クリッピング平面を記述したテキストファイルのパス', オプション);
を追加すると、クリッピング平面を追加できる。
（オブジェクトのクリッピング平面より外側の領域を描画しない）

(x,y,z)を通る法線ベクトルが(x,y,z)の平面を[x,y,z]と表し、テキストファイルに記述
cutting planeが複数ある場合は、[[x1,y1,z1],[x2,y2,z2],...]のように2次元配列で表す

オプション
scale : 数値
　　クリッピング平面を表すベクトルをscale倍する



IaddObjectの代わりにIaddAnimeObjectを使うと、複数のグラフィックをスライダーで切り替えて
表示することができる。

座標リスト、インデックスリストは、
[オブジェクト1の座標リスト, オブジェクト2の座標リスト, オブジェクト3の座標リスト,...]
のように記述する。

※IaddAnimeObjectは座標は数値のみでパラメータは使えない
※IaddAnimeObjectのオプションはscale, material, wireframeの3つ
